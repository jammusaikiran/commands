SampleMaven java project : 

File New other maven project next 

org.apache.maven (quickstart 1.4)

groupid, artifact id 

right click -> maven clean, maven install, maven test, maven build-> goal: clean install test

Run as Java application 

Git hub : SampleMavenJavaProject gitignore(Maven) 

copu url 
git bash -> git clone ""

cd thatName

go to c users asus eclipse workspace project name copy them

below eclipse workspace will find thatName paste them 

go to git bash -> git add . git commit -m "sample Maven Java "  git push 

refresh git hub 

if not come below version 3.8.0:
<configuration>
        <source>8</source>
        <target>8</target>
 </configuration>
--------------------------------------------------------------------------------------------------------

SampleMaven Web project: 


org.apache.maven (webapp 1.4)


Same Steps as Above :) 

---------------------------------------------------------------------------------------------

CI/CD for Maven Java project 


New item -> name -> sample_maven_java_build

freestyle ok

Source code manage git link of(Java project)

master undha ledha cross check

Build steps

invoke top level maven (MAVEN_HOME) (Goals: clean)
invoke same            (MAVEN_HOME) install

Add post build action: 

Archive the artifacts: Files to archive: **/*
Add (Build other projects): SampleMavenProject_test
Save and apply


New item -> name->  SampleMavenProject_test (freestyle ok)

Delete workspace before build starts


Build steps: copy artifacts from other project

project name:  SampleMavenProject_build
stable build only
**/* 

invoke top level maven target:  MAVEN_HOME test


Add post build action : Files to archive **/* Save and aplly 


Pipeline Name  then sample_maven_build click on run 

----------------------------------------------------------------------------------------------------------

CI/CD for MavenWeb project (TOMCAT 9 should be in start)


New item -> name -> sample_maven_java_build

freestyle ok

Source code manage git link of(Java project)
poll scm : *****

master undha ledha cross check

Build steps
invoke top level maven (MAVEN_HOME) (Goals: clean)
invoke same            (MAVEN_HOME) install

Add post build action: 

Archive the artifacts: Files to archive: **/*
Add (Build other projects): SampleMavenWebProject_test
Save and apply

New item -> name->  SampleMavenWebProject_test (freestyle ok)

Delete workspace before build starts


Build steps: copy artifacts from other project

project name:  SampleMavenWebProject_build

stable build only
**/* 

invoke top level maven target:  MAVEN_HOME test
Add post build action : Build other projects : SampleWebdeploy apply save


New item SampleWebdeploy free style ok
Delete workspace
Build steps 
copy from other : sampleWebProject_test **/*

Add post build action : Deplot war/ear to container **/*.war conext path is as we want 

Add container Tomact 9.0  credentials 

username: admin pass: 12345

TOMCAT URL: localhost:8083

Aplly save

pipeline 

if asked POLL SCM as well then modify code and trigger again 

-------------------------------------------------------------------------------------------------------------------


Jenkins scripted pipeline for Maven java project 


new item -> name -> Pipeline 

pipeline {
    agent any
    tools{
        maven 'MAVEN_HOME'
        // git 'GIT_HOME'
    }
    stages {
        stage('git repo & clean') {
            steps {
                bat "rmdir  /s /q java1"
                bat "git clone https://github.com/jammusaikiran/java1.git"
                bat "mvn clean -f java1"
            }
        }
        stage('install') {
            steps {
                bat "mvn install -f java1" //project name
            }
        }
        stage('test') {
            steps {
                bat "mvn test -f java1"
            }
        }
        stage('package') {
            steps {
                bat "mvn package -f java1"
            }
        }
    }
}

Apply save 

Build now 

configure -> Build periodically * * * * * 

----------------------------------------------------------------------------

Basic web application  deploy in AWS cloud using EC2 instance

go to EC2

Create an empty folder named AWS

Name: MySampleWebServer
Quick Start : ubuntu
Key pair login : Create new key pair 
in AWS folder put it there 

Network settings lo 2 options check them




Click on launch instance

Wait unitl 2/2 test cases passed

click on connect 

copy SSH 

navigate to AWS folder paste the command (yes)

sudo apt update
sudo apt-get install docker.io
sudo apt install git
sudo apt  install nano 


create folder named Example have index.html inside it 

git init git add. git commit -m "First" git remote and git push  refresh the git hub copy http path 


below installing of nano git clone link

click on ls
cd folder_name
ls(find index.html)

nano Dockerfile

FROM nginx:alpine
COPY . /usr/share/nginx/html 



sudo docker build -t mywebapp .

sudo docker run -d -p 80:80 mywebapp
public ip address paste click enter 

----------------------------------------------------------------------------------------------


all similar but directly git clone sampleMavenWebproject link

ls 
cd link

nano Dockerfile

FROM tomcat:9-jdk21
COPY target/*.war /usr/local/tomcat/webapps/ 


sudo docker build -t mavenwebproject .
sudo docker run -d -p 9090:8080  mavenwebproject
ip:9090\that ls_wala

go to instances go to security inbound rules 
got to security groups Edit inbound rules 
Add rule  just poert 9090 and 0.0 wala
save rules 

------------------------------------------------------------------------------------------------------


Docker CLI commands 


docker pull hello-world

docker run hello-world

docker ps -a (both run and stop)
docker rm container_id
docker rmi hello-world


docker pull redis

docker run --name my-redis -d redis

docker exec -it my-redis redis-cli

SET name "goku"

GET name 

docket stop my-redis can use start

docker rm my-redis

docker rmi redis 



----------------------------------------------------------------------------------------------


writing into a dockerfile 

create a folder named RedisFolder

inside it create a folder named Redis

create a plain file Dockerfile(no extensions)

FROM redis:latest
CMD ["redis-server"] 


open power shell navigate to particular folder

docker build -t redisnew(name can be anything) .

docker run --name myredisnew -d redisnew

docker stop myredisnew

docker login

docker ps -a

docker commit code gokulkashyap/redis1 

docker push gokulkashyap/redis1

docker rm code

docker rmi gokulkashyap/redis1

docker logout

docker pull gokulkashyap/redis1

docker run --name myredis -d gokulkashyap/redis1

docker exec -it myredis redis-cli

set name "gokul"

get name

docker stop myredis

docker logout



--------------------------------------------------------------------



Modify and push 


docker pull ubuntu

docker run -it --name newubuntu -d ubuntu

docker ps

docker exec -it code bash

git --version

apt update
apt install git -y

git --version

exit

docker stop  code

docker commit code gokulkashyap/newubuntu2024

docker login 

docker push gokulkashyap/newubuntu2024

docker logout

docker rm code
docker rmi gokulkashyap/newubuntu2024

docker pull gokulkashyap/newubuntu2024

docker run --name newubuntu2024 -it gokulkashyap/newubuntu2024

git --version

rm , rmi 



----------------------------------------------------------------------------

create and push docker file image 



in the project create js file

function add(a, b) {
 return a + b;
}
function subtract(a, b) {
 return a - b;
}
function multiply(a, b) {
 return a * b;
} 
function divide(a, b) {
 if (b === 0) {
 return "Cannot divide by zero!";
 }
 return a / b;
}
// Print the calculated values
console.log("Addition (2 + 3):", add(2, 3));
console.log("Subtraction (5 - 2):", subtract(5, 2));
console.log("Multiplication (4 * 3):", multiply(4, 3));
console.log("Division (10 / 2):", divide(10, 2)); 


in the same directory create Dockerfile 

FROM node:16-alpine
WORKDIR /app
COPY calculator.js /app
CMD ["node", "calculator.js"] 


docker build -t simple-calc .

docker run simple-calc

docker login

docker tag simple-calc gokulkashyap/simple-calc

docker push gokulkashyap/simple-calc


docker ps -a

docker rm , rmi gokulkashyap/simple-calc



docker pull gokulkashyap/simple-calc

docker run gokulkashyap/simple-calc

docker ps -a

docker rm , rmi ,log out



------------------------------------------------------------------

Running multiple containers using docker compose 



docker-compose.yml

version: '3.1'
services:
 db: 
image: mysql:5.7
 container_name: mysql_container
 environment:
 MYSQL_ROOT_PASSWORD: rootpassword
 MYSQL_DATABASE: wordpress_db
 MYSQL_USER: wordpress_user
 MYSQL_PASSWORD: wordpress_pass
 volumes:
 - db_data:/var/lib/mysql
 wordpress:
 depends_on:
 - db
 image: wordpress:latest
 container_name: wordpress_container
 ports:
 - "8000:80"
 environment:
 WORDPRESS_DB_HOST: db:3306
 WORDPRESS_DB_USER: wordpress_user
 WORDPRESS_DB_PASSWORD: wordpress_pass
 WORDPRESS_DB_NAME: wordpress_db
 volumes:
 - ./wordpress_data:/var/www/html 
volumes: 
 db_data: 

docker-compose up -d 

http://localhost:8000

docker-compose stop 
docker-compose start 
docker-compose down 

--------------------------------------------------------------------



minikube :

minikube start

kubectl create deployment mynginx --image=nginx

kubectl get deployments

kubectl expose deployment mynginx --type=NodePort --port=80 --target-port=80
kubectl scale deployment mynginx --replicas=4 

kubectl port-forward svc/mynginx 8081:80 
http://localhost:8081

-----------------------------------------------------------


Nagios: 


docker pull jasonrivers/nagios:latest 

docker run --name nagiosdemo -p 8888:80 jasonrivers/nagios:latest 
localhost:8888 
nagiosadmin
nagios



SRS :

Scope of an SRS Document
The scope section defines the boundaries of the software project, outlining what the system will and will not do. It sets the stage for the rest of the document by clarifying the problem the software aims to solve and the objectives it will achieve.

Key Elements of Scope:
Purpose:
Why the software is being developed.
High-level goals and objectives.
Product Overview:
A brief description of the product.
Key features and high-level functionalities.
Stakeholders:
Identifies the users and other entities affected by the system.
System Boundaries:
Defines what is included in the system (in-scope) and what is excluded (out-of-scope).
Functional Requirements
Functional requirements specify what the system should do. They describe the system's features, behaviors, and interactions with users and other systems.

Examples:
User Authentication:
Users must be able to log in with a username and password.
Data Management:
The system must allow users to create, update, retrieve, and delete records.
Report Generation:
The system should generate monthly sales reports in PDF format.
Notifications:
Email notifications should be sent to users for account activity.
Key Characteristics:

They are specific and measurable.
Focus on functionality provided to the user.
Non-Functional Requirements
Non-functional requirements describe the qualities or attributes of the system, focusing on performance, usability, reliability, and scalability. They often define the "how" of the system.

Examples:
Performance:
The system should handle 1000 concurrent users with a response time of less than 2 seconds.
Usability:
The user interface should be intuitive and support accessibility standards.
Reliability:
The system must have an uptime of 99.9%.
Scalability:
The application should scale to support an additional 10,000 users within a year.
Security:
All data transmissions must be encrypted using SSL/TLS protocols.
Key Characteristics:

They define system attributes, not specific functionalities.
They are qualitative and may involve benchmarks or thresholds.



Jenkins 

saikiran

sai9701749694 



docker 

jammusaikiran0@gmail.com
kiransai.


AWS 


jammusaikiran0@gmail.com
Sai@123kiran

